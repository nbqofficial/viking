#pragma once

#include <Windows.h>
#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <chrono>
#include <intrin.h>
#include <immintrin.h>
#include <array>

#define _USE_NNUE
#define _USE_MAGIC_BITBOARDS

#ifdef _USE_NNUE
#define ENGINE_NAME "Viking NNUE"
#define ENGINE_VERSION "NNUE"
#define ENGINE_AUTHOR "Dario Pendic (NNUE)"
#else
#define ENGINE_NAME "Viking NORM"
#define ENGINE_VERSION "NORM"
#define ENGINE_AUTHOR "Dario Pendic (NORM)"
#endif

#define start_position "rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1"			        // startpos
#define four_knights "r1bqkb1r/pppp1ppp/2n2n2/4p3/4P3/2N2N2/PPPP1PPP/R1BQKB1R w KQkq - 4 4"         // four knights opening
#define queen_h5_opening "r1bqkbnr/pppp1ppp/2n5/4p2Q/4P3/8/PPPP1PPP/RNB1KBNR w KQkq - 2 3"          // e4 e5 Qh5 Nc6
#define scandinavian_defense "rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2"         // e4 d5 scandi
#define ruy_lopez "r1bqkb1r/pppp1ppp/2n2n2/1B2p3/4P3/5N2/PPPP1PPP/RNBQ1RK1 b kq - 5 4"              // ruy lopez berlin defence castles
#define italian_fried_liver "r1bqkb1r/ppp2ppp/2n2n2/3pp1N1/2B1P3/8/PPPP1PPP/RNBQK2R w KQkq - 0 5"   // italian game fried liver attack
#define f6_enpassant_test "rnbqkbnr/ppp1p1pp/8/3pPp2/8/8/PPPP1PPP/RNBQKBNR w KQkq f6 0 3"	        // f6 is en passant square
#define pawn_test "rnbqkb1r/p1p3P1/5n1p/1p1pp3/2PP1P2/8/PP4PP/RNBQKBNR w KQkq - 0 8"                // pawn captures, promotions, moves
#define wac1 "2rr3k/pp3pp1/1nnqbN1p/3pN3/2pP4/2P3Q1/PPB4P/R4RK1 w - - 0 1"				            // Qg6
#define tricky_position "r3k2r/p1ppqpb1/bn2pnp1/3PN3/1p2P3/2N2Q1p/PPPBBPPP/R3K2R w KQkq - 0 1 "     // test position
#define killer_position "rnbqkb1r/pp1p1pPp/8/2p1pP2/1P1P4/3P3P/P1P1P3/RNBQKBNR w KQkq e6 0 1"
#define RAND_64	((uint64_t)rand() | ((uint64_t) rand() << 15) | ((uint64_t) rand() << 30) | ((uint64_t) rand() << 45) | (((uint64_t)rand() & 0xf) << 60))
#define MAX_INPUT_BUFFER 400*6
#define GAME_PHASE_LOWBOUND 0
#define GAME_PHASE_HIGHBOUND 6760
#define VALUE_UNKNOWN 100000

typedef struct _board_undo
{
    uint64_t state[12];
    uint64_t occupied[3];
    uint8_t side;
    uint8_t castling;
    uint8_t enpassant;
    uint8_t fifty_move;
    uint64_t hashkey;
}board_undo, *pboard_undo;

typedef struct _search_info
{
    int start_time;
    int stop_time;
    int depth;
    bool timeset;
    bool infinite;
    bool quit;
    bool stopped;
}search_info, *psearch_info;

typedef struct _move_list
{
    std::array<uint32_t, 256> m_moves{};
    uint8_t m_size = 0;

    inline void push(uint32_t move) noexcept
    {
        this->m_moves[this->m_size++] = move;
    }

    inline void clear() noexcept
    {
        this->m_size = 0;
    }

    inline const uint32_t* begin() const noexcept
    {
        return this->m_moves.data();
    }

    inline const uint32_t* end() const noexcept
    {
        return this->m_moves.data() + this->m_size;
    }

    inline uint32_t* begin() noexcept
    {
        return this->m_moves.data();
    }

    inline uint32_t* end() noexcept
    {
        return this->m_moves.data() + this->m_size;
    }

}move_list, *pmove_list;


enum squares : uint8_t
{
    a8, b8, c8, d8, e8, f8, g8, h8,
    a7, b7, c7, d7, e7, f7, g7, h7,
    a6, b6, c6, d6, e6, f6, g6, h6,
    a5, b5, c5, d5, e5, f5, g5, h5,
    a4, b4, c4, d4, e4, f4, g4, h4,
    a3, b3, c3, d3, e3, f3, g3, h3,
    a2, b2, c2, d2, e2, f2, g2, h2,
    a1, b1, c1, d1, e1, f1, g1, h1, no_sq
};

enum pieces : uint8_t
{
    P, N, B, R, Q, K, p, n, b, r, q, k
};

enum sides : uint8_t
{
    white, black, both
};

enum castle : uint8_t
{
    white_oo = 1, white_ooo = 2, black_oo = 4, black_ooo = 8
};

enum movegen : uint8_t
{
    all_moves, only_forcing
};

enum gamephase : uint8_t
{
    opening, endgame, middlegame
};


static const char* square_to_coords[] ={
    "a8", "b8", "c8", "d8", "e8", "f8", "g8", "h8",
    "a7", "b7", "c7", "d7", "e7", "f7", "g7", "h7",
    "a6", "b6", "c6", "d6", "e6", "f6", "g6", "h6",
    "a5", "b5", "c5", "d5", "e5", "f5", "g5", "h5",
    "a4", "b4", "c4", "d4", "e4", "f4", "g4", "h4",
    "a3", "b3", "c3", "d3", "e3", "f3", "g3", "h3",
    "a2", "b2", "c2", "d2", "e2", "f2", "g2", "h2",
    "a1", "b1", "c1", "d1", "e1", "f1", "g1", "h1"
};

static const char* pieces_to_ascii = "PNBRQKpnbrqk";

static const uint8_t side_to_piece_type[2][6] = {
    { P, N, B, R, Q, K }, { p, n, b, r, q, k } };

static const uint64_t file_a = 72340172838076673L;

static const uint64_t file_b = 144680345676153346L;

static const uint64_t file_c = 289360691352306692L;

static const uint64_t file_d = 578721382704613384L;

static const uint64_t file_e = 1157442765409226768L;

static const uint64_t file_f = 2314885530818453536L;

static const uint64_t file_g = 4629771061636907072L;

static const uint64_t file_h = -9187201950435737472L;

static const uint64_t file_ab = 217020518514230019L;

static const uint64_t file_gh = -4557430888798830400L;

static const uint64_t file_cdef = 4340410370284600380L;

static const uint64_t rank_1 = -72057594037927936L;

static const uint64_t rank_4 = 1095216660480L;

static const uint64_t rank_5 = 4278190080L;

static const uint64_t rank_8 = 255L;

static const uint64_t white_territory = 18446744069414584320;

static const uint64_t black_territory = 4294967295;

static const uint64_t file_masks_by_square[] = {
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144,
    72340172838076673, 144680345676153346, 289360691352306692, 578721382704613384, 1157442765409226768, 2314885530818453536, 4629771061636907072, 9259542123273814144
};

static const uint64_t rank_masks_by_square[] = { 
    255, 255, 255, 255, 255, 255, 255, 255,
    65280, 65280, 65280, 65280, 65280, 65280, 65280, 65280,
    16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680, 16711680,
    4278190080, 4278190080, 4278190080, 4278190080, 4278190080, 4278190080, 4278190080, 4278190080,
    1095216660480, 1095216660480, 1095216660480, 1095216660480, 1095216660480, 1095216660480, 1095216660480, 1095216660480,
    280375465082880, 280375465082880, 280375465082880, 280375465082880, 280375465082880, 280375465082880, 280375465082880, 280375465082880,
    71776119061217280, 71776119061217280, 71776119061217280, 71776119061217280, 71776119061217280, 71776119061217280, 71776119061217280, 71776119061217280,
    18374686479671623680, 18374686479671623680, 18374686479671623680, 18374686479671623680, 18374686479671623680, 18374686479671623680, 18374686479671623680, 18374686479671623680,
};

static const uint64_t isolated_masks_by_square[] = {
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
    144680345676153346, 361700864190383365, 723401728380766730, 1446803456761533460, 2893606913523066920, 5787213827046133840, 11574427654092267680, 4629771061636907072,
};

static const uint64_t white_passed_masks_by_square[] = {
    0, 0, 0, 0, 0, 0, 0, 0,
    3, 7, 14, 28, 56, 112, 224, 192,
    771, 1799, 3598, 7196, 14392, 28784, 57568, 49344,
    197379, 460551, 921102, 1842204, 3684408, 7368816, 14737632, 12632256,
    50529027, 117901063, 235802126, 471604252, 943208504, 1886417008, 3772834016, 3233857728,
    12935430915, 30182672135, 60365344270, 120730688540, 241461377080, 482922754160, 965845508320, 827867578560,
    3311470314243, 7726764066567, 15453528133134, 30907056266268, 61814112532536, 123628225065072, 247256450130144, 211934100111552,
    847736400446211, 1978051601041159, 3956103202082318, 7912206404164636, 15824412808329272, 31648825616658544, 63297651233317088, 54255129628557504,
};

static const uint64_t black_passed_masks_by_square[] = {
    217020518514230016, 506381209866536704, 1012762419733073408, 2025524839466146816, 4051049678932293632, 8102099357864587264, 16204198715729174528, 13889313184910721024,
    217020518514229248, 506381209866534912, 1012762419733069824, 2025524839466139648, 4051049678932279296, 8102099357864558592, 16204198715729117184, 13889313184910671872,
    217020518514032640, 506381209866076160, 1012762419732152320, 2025524839464304640, 4051049678928609280, 8102099357857218560, 16204198715714437120, 13889313184898088960,
    217020518463700992, 506381209748635648, 1012762419497271296, 2025524838994542592, 4051049677989085184, 8102099355978170368, 16204198711956340736, 13889313181676863488,
    217020505578799104, 506381179683864576, 1012762359367729152, 2025524718735458304, 4051049437470916608, 8102098874941833216, 16204197749883666432, 13889312357043142656,
    217017207043915776, 506373483102470144, 1012746966204940288, 2025493932409880576, 4050987864819761152, 8101975729639522304, 16203951459279044608, 13889101250810609664,
    216172782113783808, 504403158265495552, 1008806316530991104, 2017612633061982208, 4035225266123964416, 8070450532247928832, 16140901064495857664, 13835058055282163712,
    0, 0, 0, 0, 0, 0, 0, 0,
};

static const uint8_t rank_by_square[64] = {
    7, 7, 7, 7, 7, 7, 7, 7,
    6, 6, 6, 6, 6, 6, 6, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    4, 4, 4, 4, 4, 4, 4, 4,
    3, 3, 3, 3, 3, 3, 3, 3,
    2, 2, 2, 2, 2, 2, 2, 2,
    1, 1, 1, 1, 1, 1, 1, 1,
    0, 0, 0, 0, 0, 0, 0, 0
};

static const int nnue_pieces[12] = { 6, 5, 4, 3, 2, 1, 12, 11, 10, 9, 8, 7 };

static const int nnue_squares[64] = {
    a1, b1, c1, d1, e1, f1, g1, h1,
    a2, b2, c2, d2, e2, f2, g2, h2,
    a3, b3, c3, d3, e3, f3, g3, h3,
    a4, b4, c4, d4, e4, f4, g4, h4,
    a5, b5, c5, d5, e5, f5, g5, h5,
    a6, b6, c6, d6, e6, f6, g6, h6,
    a7, b7, c7, d7, e7, f7, g7, h7,
    a8, b8, c8, d8, e8, f8, g8, h8
};

static const uint64_t light_squares = 12273903644374837845L;

static const uint64_t dark_squares = 6172840429334713770L;

static const uint64_t center = 103481868288L;

static const uint64_t extended_center = 66229406269440L;

static const uint64_t king_side = -1085102592571150096L;

static const uint64_t queen_side = 1085102592571150095L;

static const uint64_t rank_masks[] = { 0xFFL, 0xFF00L, 0xFF0000L, 0xFF000000L, 0xFF00000000L, 0xFF0000000000L, 0xFF000000000000L, 0xFF00000000000000L };

static const uint64_t file_masks[] = { 0x101010101010101L, 0x202020202020202L, 0x404040404040404L, 0x808080808080808L, 0x1010101010101010L, 0x2020202020202020L, 0x4040404040404040L, 0x8080808080808080L };

static const uint64_t diag_masks[] = { 0x1L, 0x102L, 0x10204L, 0x1020408L, 0x102040810L, 0x10204081020L, 0x1020408102040L, 0x102040810204080L, 0x204081020408000L, 0x408102040800000L, 0x810204080000000L, 0x1020408000000000L, 0x2040800000000000L, 0x4080000000000000L, 0x8000000000000000L };

static const uint64_t antidiag_masks[] = { 0x80L, 0x8040L, 0x804020L, 0x80402010L, 0x8040201008L, 0x804020100804L, 0x80402010080402L, 0x8040201008040201L, 0x4020100804020100L, 0x2010080402010000L, 0x1008040201000000L, 0x804020100000000L, 0x402010000000000L, 0x201000000000000L, 0x100000000000000L };

static const uint64_t knight_attacks[] = {
132096, 329728, 659712, 1319424, 2638848, 5277696, 10489856, 4202496,
33816580, 84410376, 168886289, 337772578, 675545156, 1351090312, 2685403152, 
1075839008, 8657044482, 21609056261, 43234889994, 86469779988, 172939559976, 
345879119952, 687463207072, 275414786112, 2216203387392, 5531918402816, 11068131838464, 
22136263676928, 44272527353856, 88545054707712, 175990581010432, 70506185244672,
567348067172352, 1416171111120896, 2833441750646784, 5666883501293568, 11333767002587136, 
22667534005174272, 45053588738670592, 18049583422636032, 145241105196122112, 362539804446949376,
725361088165576704, 1450722176331153408, 2901444352662306816, 5802888705324613632, 11533718717099671552,
4620693356194824192, 288234782788157440, 576469569871282176, 1224997833292120064, 2449995666584240128, 
4899991333168480256, 9799982666336960512, 1152939783987658752, 2305878468463689728, 1128098930098176, 
2257297371824128, 4796069720358912, 9592139440717824, 19184278881435648, 
38368557762871296, 4679521487814656, 9077567998918656 };

static const uint64_t king_attacks[] = {
770, 1797, 3594, 7188, 14376, 28752, 57504, 49216, 197123, 460039, 920078,
1840156, 3680312, 7360624, 14721248, 12599488, 50463488, 117769984, 235539968, 
471079936, 942159872, 1884319744, 3768639488, 3225468928, 12918652928, 30149115904,
60298231808, 120596463616, 241192927232, 482385854464, 964771708928, 825720045568, 
3307175149568, 7718173671424, 15436347342848, 30872694685696, 61745389371392, 123490778742784,
246981557485568, 211384331665408, 846636838289408, 1975852459884544, 3951704919769088, 
7903409839538176, 15806819679076352, 31613639358152704, 63227278716305408, 54114388906344448,
216739030602088448, 505818229730443264, 1011636459460886528, 2023272918921773056, 4046545837843546112,
8093091675687092224, 16186183351374184448, 13853283560024178688, 144959613005987840, 362258295026614272,
724516590053228544, 1449033180106457088, 2898066360212914176, 5796132720425828352, 
11592265440851656704, 4665729213955833856 };

static const uint64_t king_ring2[] = {
460550, 986893, 2039579, 4079158, 8158316, 16316632, 15790256, 14737504, 117900807,
252644623, 522132255, 1044264510, 2088529020, 4177058040, 4042305776, 3772801248,
30182606599, 64677023503, 133665857311, 267331714622, 534663429244, 1069326858488,
1034830278896, 965837119712, 7726747289344, 16557318016768, 34218459471616, 68436918943232,
136873837886464, 273747675772928, 264916551397376, 247254302646272, 1978047306072064,
4238673412292608, 8759925624733696, 17519851249467392, 35039702498934784, 70079404997869568,
67818637157728256, 63297101477445632, 506380110354448384, 1085100393546907648, 2242540959931826176,
4485081919863652352, 8970163839727304704, 17940327679454609408, 17361571112378433536, 16204057978226081792,
506099734771924992, 1084539642365083648, 2241419457551400960, 4482838915102801920, 8965677830205603840,
17931355660411207680, 17343627078586597376, 16168169914937376768, 434323585645936640, 940987339818139648,
1954314848162545664, 3908629696325091328, 7817259392650182656, 15634518785300365312,
12749954427876540416, 6980825713028890624 };

static const uint64_t pawn_attacks[2][64] = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 5, 10, 20, 40, 80, 160, 64, 512, 1280, 2560, 5120, 10240, 20480, 40960, 16384,
      131072, 327680, 655360, 1310720, 2621440, 5242880, 10485760, 4194304, 33554432, 83886080, 167772160, 
      335544320, 671088640, 1342177280, 2684354560, 1073741824, 8589934592, 21474836480, 42949672960, 85899345920, 
      171798691840, 343597383680, 687194767360, 274877906944, 2199023255552, 5497558138880, 10995116277760, 21990232555520,
      43980465111040, 87960930222080, 175921860444160, 70368744177664, 562949953421312, 1407374883553280, 2814749767106560,
      5629499534213120, 11258999068426240, 22517998136852480, 45035996273704960, 18014398509481984 },
    {
      512, 1280, 2560, 5120, 10240, 20480, 40960, 16384, 131072, 327680, 655360, 1310720, 2621440, 5242880, 10485760, 
      4194304, 33554432, 83886080, 167772160, 335544320, 671088640, 1342177280, 2684354560, 1073741824, 8589934592, 
      21474836480, 42949672960, 85899345920, 171798691840, 343597383680, 687194767360, 274877906944, 2199023255552, 
      5497558138880, 10995116277760, 21990232555520, 43980465111040, 87960930222080, 175921860444160, 70368744177664,
      562949953421312, 1407374883553280, 2814749767106560, 5629499534213120, 11258999068426240, 22517998136852480, 
      45035996273704960, 18014398509481984, 144115188075855872, 360287970189639680, 720575940379279360, 1441151880758558720, 
      2882303761517117440, 5764607523034234880, 11529215046068469760, 4611686018427387904, 0, 0, 0, 0, 0, 0, 0, 0, }
};

#ifdef _USE_MAGIC_BITBOARDS
static const uint8_t bishop_relevant_bits[64] = {
    6, 5, 5, 5, 5, 5, 5, 6,
    5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 9, 9, 7, 5, 5,
    5, 5, 7, 7, 7, 7, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5,
    6, 5, 5, 5, 5, 5, 5, 6
};

static const uint8_t rook_relevant_bits[64] = {
    12, 11, 11, 11, 11, 11, 11, 12,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    11, 10, 10, 10, 10, 10, 10, 11,
    12, 11, 11, 11, 11, 11, 11, 12
};

static const uint64_t rook_magic_numbers[64] = {
    0x8a80104000800020ULL,
    0x140002000100040ULL,
    0x2801880a0017001ULL,
    0x100081001000420ULL,
    0x200020010080420ULL,
    0x3001c0002010008ULL,
    0x8480008002000100ULL,
    0x2080088004402900ULL,
    0x800098204000ULL,
    0x2024401000200040ULL,
    0x100802000801000ULL,
    0x120800800801000ULL,
    0x208808088000400ULL,
    0x2802200800400ULL,
    0x2200800100020080ULL,
    0x801000060821100ULL,
    0x80044006422000ULL,
    0x100808020004000ULL,
    0x12108a0010204200ULL,
    0x140848010000802ULL,
    0x481828014002800ULL,
    0x8094004002004100ULL,
    0x4010040010010802ULL,
    0x20008806104ULL,
    0x100400080208000ULL,
    0x2040002120081000ULL,
    0x21200680100081ULL,
    0x20100080080080ULL,
    0x2000a00200410ULL,
    0x20080800400ULL,
    0x80088400100102ULL,
    0x80004600042881ULL,
    0x4040008040800020ULL,
    0x440003000200801ULL,
    0x4200011004500ULL,
    0x188020010100100ULL,
    0x14800401802800ULL,
    0x2080040080800200ULL,
    0x124080204001001ULL,
    0x200046502000484ULL,
    0x480400080088020ULL,
    0x1000422010034000ULL,
    0x30200100110040ULL,
    0x100021010009ULL,
    0x2002080100110004ULL,
    0x202008004008002ULL,
    0x20020004010100ULL,
    0x2048440040820001ULL,
    0x101002200408200ULL,
    0x40802000401080ULL,
    0x4008142004410100ULL,
    0x2060820c0120200ULL,
    0x1001004080100ULL,
    0x20c020080040080ULL,
    0x2935610830022400ULL,
    0x44440041009200ULL,
    0x280001040802101ULL,
    0x2100190040002085ULL,
    0x80c0084100102001ULL,
    0x4024081001000421ULL,
    0x20030a0244872ULL,
    0x12001008414402ULL,
    0x2006104900a0804ULL,
    0x1004081002402ULL
};

static const uint64_t bishop_magic_numbers[64] = {
    0x40040844404084ULL,
    0x2004208a004208ULL,
    0x10190041080202ULL,
    0x108060845042010ULL,
    0x581104180800210ULL,
    0x2112080446200010ULL,
    0x1080820820060210ULL,
    0x3c0808410220200ULL,
    0x4050404440404ULL,
    0x21001420088ULL,
    0x24d0080801082102ULL,
    0x1020a0a020400ULL,
    0x40308200402ULL,
    0x4011002100800ULL,
    0x401484104104005ULL,
    0x801010402020200ULL,
    0x400210c3880100ULL,
    0x404022024108200ULL,
    0x810018200204102ULL,
    0x4002801a02003ULL,
    0x85040820080400ULL,
    0x810102c808880400ULL,
    0xe900410884800ULL,
    0x8002020480840102ULL,
    0x220200865090201ULL,
    0x2010100a02021202ULL,
    0x152048408022401ULL,
    0x20080002081110ULL,
    0x4001001021004000ULL,
    0x800040400a011002ULL,
    0xe4004081011002ULL,
    0x1c004001012080ULL,
    0x8004200962a00220ULL,
    0x8422100208500202ULL,
    0x2000402200300c08ULL,
    0x8646020080080080ULL,
    0x80020a0200100808ULL,
    0x2010004880111000ULL,
    0x623000a080011400ULL,
    0x42008c0340209202ULL,
    0x209188240001000ULL,
    0x400408a884001800ULL,
    0x110400a6080400ULL,
    0x1840060a44020800ULL,
    0x90080104000041ULL,
    0x201011000808101ULL,
    0x1a2208080504f080ULL,
    0x8012020600211212ULL,
    0x500861011240000ULL,
    0x180806108200800ULL,
    0x4000020e01040044ULL,
    0x300000261044000aULL,
    0x802241102020002ULL,
    0x20906061210001ULL,
    0x5a84841004010310ULL,
    0x4010801011c04ULL,
    0xa010109502200ULL,
    0x4a02012000ULL,
    0x500201010098b028ULL,
    0x8040002811040900ULL,
    0x28000010020204ULL,
    0x6000020202d0240ULL,
    0x8918844842082200ULL,
    0x4010011029020020ULL
};

extern uint64_t rook_masks[64];

extern uint64_t bishop_masks[64];

extern uint64_t rook_attacks[64][4096];

extern uint64_t bishop_attacks[64][512];
#endif 

static const uint8_t mvvlva[6][5] = {
    { 110, 130, 150, 170, 190 },
    { 108, 128, 148, 168, 188 },
    { 106, 126, 146, 166, 186 },
    { 104, 124, 144, 164, 184 },
    { 102, 122, 142, 162, 182 },
    { 100, 120, 140, 160, 180 }
};

static const uint8_t castling_rights[] = {
     7, 15, 15, 15,  3, 15, 15, 11,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    15, 15, 15, 15, 15, 15, 15, 15,
    13, 15, 15, 15, 12, 15, 15, 14 };

static const int mirror_square[] = {
    a1, b1, c1, d1, e1, f1, g1, h1,
    a2, b2, c2, d2, e2, f2, g2, h2,
    a3, b3, c3, d3, e3, f3, g3, h3,
    a4, b4, c4, d4, e4, f4, g4, h4,
    a5, b5, c5, d5, e5, f5, g5, h5,
    a6, b6, c6, d6, e6, f6, g6, h6,
    a7, b7, c7, d7, e7, f7, g7, h7,
    a8, b8, c8, d8, e8, f8, g8, h8
};

static const int material_evaluation[2][12] = {
    { 88, 335, 345, 480, 1025, 10000, -88, -335, -345, -480, -1025, -10000 },
    { 95, 305, 325, 512, 980, 10000, -95, -305, -325, -512, -980, -10000 }
};

static const int positional_evaluation[2][6][64] = {
    {
        {
            0,   0,   0,   0,   0,   0,  0,   0,
            98, 134,  61,  95,  68, 126, 34, -11,
            -6,   7,  26,  31,  65,  56, 25, -20,
            -14,  13,   6,  21,  23,  12, 17, -23,
            -27,  -2,  -5,  12,  17,   6, 10, -25,
            -26,  -4,  -4, -10,   3,   3, 33, -12,
            -35,  -1, -20, -23, -22,  24, 38, -22,
             0,   0,   0,   0,   0,   0,  0,   0
        },
        {
            -167, -89, -34, -49,  61, -97, -15, -107,
            -73, -41,  72,  36,  23,  62,   7,  -17,
            -47,  60,  37,  65,  84, 129,  73,   44,
            -9,  17,  19,  53,  37,  69,  18,   22,
            -13,   4,  16,  13,  28,  19,  21,   -8,
            -23,  -9,  12,  10,  19,  17,  25,  -16,
            -29, -53, -12,  -3,  -1,  18, -14,  -19,
            -105, -21, -58, -33, -17, -28, -19,  -23
        },
        {
            -29,   4, -82, -37, -25, -42,   7,  -8,
            -26,  16, -18, -13,  30,  59,  18, -47,
            -16,  37,  43,  40,  35,  50,  37,  -2,
            -4,   5,  19,  50,  37,  37,   7,  -2,
            -6,  13,  13,  26,  34,  12,  10,   4,
            0,  15,  15,  15,  14,  27,  18,  10,
            4,  15,  16,   0,   7,  21,  33,   1,
            -33,  -3, -14, -21, -13, -12, -39, -21
        },
        {
            32,  42,  32,  51, 63,  9,  31,  43,
            27,  32,  58,  62, 80, 67,  26,  44,
            -5,  19,  26,  36, 17, 45,  61,  16,
            -24, -11,   7,  26, 24, 35,  -8, -20,
            -36, -26, -12,  -1,  9, -7,   6, -23,
            -45, -25, -16, -17,  3,  0,  -5, -33,
            -44, -16, -20,  -9, -1, 11,  -6, -71,
            -19, -13,   1,  17, 16,  7, -37, -26
        },
        {
            -28,   0,  29,  12,  59,  44,  43,  45,
            -24, -39,  -5,   1, -16,  57,  28,  54,
            -13, -17,   7,   8,  29,  56,  47,  57,
            -27, -27, -16, -16,  -1,  17,  -2,   1,
            -9, -26,  -9, -10,  -2,  -4,   3,  -3,
            -14,   2, -11,  -2,  -5,   2,  14,   5,
            -35,  -8,  11,   2,   8,  15,  -3,   1,
            -1, -18,  -9,  10, -15, -25, -31, -50
        },
        {
            -65,  23,  16, -15, -56, -34,   2,  13,
            29,  -1, -20,  -7,  -8,  -4, -38, -29,
            -9,  24,   2, -16, -20,   6,  22, -22,
            -17, -20, -12, -27, -30, -25, -14, -36,
            -49,  -1, -27, -39, -46, -44, -33, -51,
            -14, -14, -22, -46, -44, -30, -15, -27,
            1,   7,  -8, -64, -43, -16,   9,   8,
            -15,  36,  12, -54,   8, -28,  24,  14
        }
    },
    {
        {
             0,   0,   0,   0,   0,   0,   0,   0,
            178, 173, 158, 134, 147, 132, 165, 187,
            94, 100,  85,  67,  56,  53,  82,  84,
            32,  24,  13,   5,  -2,   4,  17,  17,
            13,   9,  -3,  -7,  -7,  -8,   3,  -1,
            4,   7,  -6,   1,   0,  -5,  -1,  -8,
            13,   8,   8,  10,  13,   0,   2,  -7,
            0,   0,   0,   0,   0,   0,   0,   0
        },
        {
            -58, -38, -13, -28, -31, -27, -63, -99,
            -25,  -8, -25,  -2,  -9, -25, -24, -52,
            -24, -20,  10,   9,  -1,  -9, -19, -41,
            -17,   3,  22,  22,  22,  11,   8, -18,
            -18,  -6,  16,  25,  16,  17,   4, -18,
            -23,  -3,  -1,  15,  10,  -3, -20, -22,
            -42, -20, -10,  -5,  -2, -20, -23, -44,
            -29, -51, -23, -15, -22, -18, -50, -64
        },
        {
             -14, -21, -11,  -8, -7,  -9, -17, -24,
             -8,  -4,   7, -12, -3, -13,  -4, -14,
             2,  -8,   0,  -1, -2,   6,   0,   4,
             -3,   9,  12,   9, 14,  10,   3,   2,
             -6,   3,  13,  19,  7,  10,  -3,  -9,
             -12,  -3,   8,  10, 13,   3,  -7, -15,
             -14, -18,  -7,  -1,  4,  -9, -15, -27,
             -23,  -9, -23,  -5, -9, -16,  -5, -17
        },
        {
              13, 10, 18, 15, 12,  12,   8,   5,
              11, 13, 13, 11, -3,   3,   8,   3,
              7,  7,  7,  5,  4,  -3,  -5,  -3,
              4,  3, 13,  1,  2,   1,  -1,   2,
              3,  5,  8,  4, -5,  -6,  -8, -11,
              -4,  0, -5, -1, -7, -12,  -8, -16,
              -6, -6,  0,  2, -9,  -9, -11,  -3,
              -9,  2,  3, -1, -5, -13,   4, -20
        },
        {
             -9,  22,  22,  27,  27,  19,  10,  20,
            -17,  20,  32,  41,  58,  25,  30,   0,
             -20,   6,   9,  49,  47,  35,  19,   9,
             3, 22,  24,  45,  57,  40,  57,  36,
            -18,  28,  19,  47,  31,  34,  39,  23,
            -16, -27,  15,   6,   9,  17,  10,   5,
            -22, -23, -30, -16, -16, -23, -36, -32,
            -33, -28, -22, -43,  -5, -32, -20, -41
        },
        {
            -74, -35, -18, -18, -11,  15,   4, -17,
            -12,  17,  14,  17,  17,  38,  23,  11,
             10,  17,  23,  15,  20,  45,  44,  13,
            -8,  22,  24,  27,  26,  33,  26,   3,
            -18,  -4,  21,  24,  27,  23,   9, -11,
            -19,  -3,  11,  21,  23,  16,   7,  -9,
            -27, -11,   4,  13,  14,   4,  -5, -17,
            -53, -34, -21, -11, -28, -14, -24, -43
        }
    }
};

static const int passed_pawn_evaluation[] = { 0, 10, 20, 40, 70, 110, 160, 0 };

static const uint64_t state_hashkey[12][64] = {
    { 
    0x9904662fb3c24ae1, 0xc59adcabb4a95f90, 0x9dbe36bc60dda6e9, 0xb1766ba9896d953c, 0x772183cf804c8124, 0xe881b24726834db7, 0x7a9bce6cd689074d, 0x8c8879aee145a6a6,
    0xfba07e96bb3ec509, 0x8764a787f72e9ad4, 0xbd7f9fe5bfface45, 0xb442698375c4830a, 0xc17b75ab83990120, 0xa46a08bba5a05878, 0x6b9faf848d24df32, 0x6753de5f6fa48ddc,
    0xd629f78526f94944, 0x26cc7341b35e6c4, 0xfd6f80c961d95a1, 0x27dec208acc8c09d, 0x1f316487f9ed58b0, 0xa6d32240bddcd772, 0xde093a4b2540187e, 0x5d132f3549f4c080,
    0x267d48f264665753, 0xfb8cef3587dfaf14, 0x608fd08b6a6e368e, 0x6f307d7be32bac49, 0x15fffb1a5447ba61, 0xdfba2987af4ec89c, 0x6c2e5adc9973401d, 0x709fd3e4a50677,
    0x231afafa281cd42c, 0x3d7963f247095f1e, 0x3f0e8927958611f4, 0x5d5a96a7e66a5fa4, 0x924fc00d43e7e732, 0x235e83b3236781d3, 0x745b8122be9c58f, 0x56fcc6766c8ea52a,
    0x53b8127de215d078, 0x1810fed12c87765f, 0x56005b53fb0ba8d, 0xe18f7401460ab807, 0xb0c67ca0928f9d18, 0x6924676a8324d54, 0xe7763321689f6d69, 0x59ff1711a4353004,
    0x6bce71c3b9ec9f16, 0xf9acf65a256a2cf7, 0xa14957b4272bcf68, 0x6cdf44c5a4ddef11, 0xd9d5d74902c45579, 0xe50a5236d3929643, 0x5de79b3d2fa293d3, 0x81450273a905e8f5,
    0x572c0d16531ebb97, 0x72714a566f3b282d, 0xf585bf26e66a668, 0x4209221ab23cc325, 0x8f4c2250380a53b1, 0xb1ad50294e88a528, 0x18d195358754bf0b, 0x77f2f9632097b0f1, },
    {
    0x5883b366994a80c1, 0xb19c33f0373f3ee9, 0x87f34c29f24346c2, 0x5f4a942fcb4d2fe7, 0x9be47e74672a8390, 0x80e51474486cec6c, 0x198cd717b6a701e1, 0xb5393bf8dec8871,
    0xf9fc4ae954712f0c, 0xbcd699d1e1b2ce38, 0xae68c4a26854b382, 0x922f5b5d843c36c2, 0x34d631898e6fa7da, 0x9ceda44f923164e0, 0x6ca257cd275fae39, 0x63a7fba24eaf1ff1,
    0xdfc1c1b8c5364328, 0x1183c848390e9dcb, 0x22007dcfc5208607, 0x4561fd451982b765, 0xbd65111875e4d8c5, 0x74258023a1a37a36, 0x83db92bcd054578d, 0xe6f7dc7c8075f871,
    0xfc941274091d9c75, 0x60118d5f8543d478, 0x3109b9f42a5f5882, 0xe87b75f089235841, 0xbc7180feb798527f, 0x15e11a9fcaa0786, 0x2252bf6aa7ada568, 0x35e176398dfe13f5,
    0xa857dcdf46cff389, 0xa1483906cafefcb8, 0xfded06bd9d39007b, 0x41d32cf353e9ff0d, 0x408860e8fda13a6, 0x6e2a7e0ccc85e3cb, 0x1a821d179d2675ec, 0x3269945ce4733605,
    0x48a63283a25520ad, 0xf59aa12c32e51927, 0xf63b12e7448a194d, 0x4a4f2e89e6acd942, 0xcaf38cb0757c4bcd, 0xcf30fc081911fe64, 0x8e54d261dc4ad04c, 0xcb492350a7342d,
    0x9b5cf74f7958b260, 0xee7629e018d6c908, 0x1bbd37d9ef20dea5, 0x5333e8b92b8c749f, 0x584843803a1319fe, 0xca7a2e086c020b93, 0xf13660e3d6b9a753, 0x2486ca28457d67e,
    0xa32df6356767d3d3, 0x1192b173832d7cbe, 0x5f84f74aa1fb5707, 0xd5f42c6f8332e7a6, 0x40f929f032349b32, 0x47c1204b1c26c101, 0xfc22ecd596636bdb, 0xd9f91fe9836c480b, },
    {
    0x863029ce1230836b, 0x8642409881fcba54, 0xefcecdc6e8bce48, 0x8e01b2a4a6148a1d, 0x676532e665b948db, 0x4ac38afe80a7a237, 0x83b6b8ac17caef57, 0x5b9bf4203936176d,
    0xde6e98f67dc59943, 0x5cc23e823652f1f6, 0x92f7b3bdd0f5a015, 0x8c9c05786db03d8f, 0xece79b5ec7fa275b, 0x279158628c47dd27, 0xc03ef4b96c43964a, 0xb46655a6f5b0c740,
    0x4c78c770e8d89da7, 0xf89490401776275, 0xf0c0604bd64f526a, 0xf6a20d5405cdc5c8, 0x1568750a7814448a, 0x60dd2ee790a3b6a1, 0x17c902cc64365acd, 0x4dd3db3792c0eea3,
    0xcbf31a8430ffef9a, 0x3e99b0b3dc2b8dc7, 0xd2b2dafcade801c, 0x7c60620a05bfb15d, 0x9cebe4ee49248634, 0xe04c1f4f297286de, 0x2a330dd081591f0d, 0xba76d905017669bb,
    0x8a25f19cfef13b51, 0xe4cfb90755ec3d84, 0x31a3ff80705f1350, 0xbb62dff5b1a1d221, 0x3f233605528c4898, 0xb8c596cb8fc5c5f9, 0xef3b956f30f84fca, 0xecc7b7db7f4a1a31,
    0x2e8e92ebfac6c0b5, 0x47321c757c2f176a, 0x33f97603c3b5002, 0xba42e11ae39b45b1, 0x10fb7fdf482d4cea, 0x22c3d5209546a871, 0x86918dae0e2f56d9, 0xe7f5f03eb35fb7b0,
    0x456e8c07483ae9e5, 0xce42149629a341da, 0x2bcb7ea05dd02e7f, 0xce797a475d1b0de9, 0x9c2e81409aaaf7d2, 0xc2a346c2c77bcba9, 0x69e472902c2ddda3, 0x3ab7298d73c43068,
    0xdc5c268a8aeab1b2, 0x294ba642bd72985a, 0xc4dd23ddccae85eb, 0x5c2d3c31401d396c, 0x3cd30ec35fabdfeb, 0x78f342f7fb027268, 0x20f44fb568735fa4, 0x64179d1df2af998d, },
    {
    0x30d1f0b5b2955a21, 0x4bb531b53a827011, 0x14e30ca35ed706bb, 0x3003989830651c20, 0xf0ebb5758217ac45, 0x3cc52df5fed45159, 0xc7a1bbfa85130ced, 0x5249dd6013c22fd9,
    0xb0bf1a0dcf5c72ed, 0x544f46a80eae6c4e, 0xae33fb0866fe053c, 0x62f0ab639cc097b0, 0xd9f7f17bba58c2e4, 0x5ffd3f04b783eb8b, 0x65fd89198af17ca3, 0x3b7720fd29486806,
    0x2d1723fd2e023002, 0xdea59c78020f6301, 0x401f0750dac8140b, 0x2806e7c5b0497408, 0x308398ad4e9bc73e, 0x7da1ca9ca27dfef2, 0x6a598749b404af7e, 0x608f51f619768f55,
    0x7e624672bc2b9002, 0x6e4d8e420e37513f, 0x9fc0d8e810e6e9b, 0xf4474957eba047dd, 0xa9b739391b0de8c0, 0x622c3087414900e5, 0x85579cde1d95e24a, 0x7a1860c62bacfc0a,
    0xeb4d4882b4a152c4, 0x1437db03dd71dfc3, 0x103b6f3fe81833b2, 0xa071293e2632f122, 0x1ee78c41621e814a, 0x3dd7cdff6cc6aa9e, 0x97fa11e8427f3069, 0x4eff5b813db3cded,
    0xf1392d06538a3fd1, 0xfdff09bcb2047768, 0x1375a8f023e2efec, 0x24d29744b7761d94, 0x97261c7da4c183af, 0x30f2b3d0507195bd, 0xd3b42fd63d6d064f, 0x156708f3a0febeca,
    0x5ecb933bd2b2bce5, 0x9f38918c356f65af, 0xc97c5bd7945b7836, 0xbf17d700082b632f, 0x72d080da82aa3a36, 0xf22d80768d9e68c5, 0xac797512531ee405, 0x3d7947c39feb82f2,
    0x107e8b662dc7b474, 0x84c445d3efac113f, 0x4868eb7bf3a11454, 0xe21be0ef8b9ce8b6, 0x69218b19e28e551b, 0x4eeb9e3f86bb939d, 0xbccddca4c4a46fa7, 0x4636718fab0139b8, },
    {
    0x4f30ff6dae984c22, 0xd21c8655a66ebe61, 0xb3adcf4f6c46795c, 0x7fb88799e0de1e2f, 0x27bfea726266490f, 0x3592056a52921c11, 0xebd5b9d2e9a0d7e5, 0x2c45020fee316df5,
    0x80b5cf7f4154eb49, 0xb8a6335464656380, 0xcb25d851778d1439, 0x5c9540af9c0e0565, 0xe44ee22f4fabfdb3, 0x39d92245d7857a4e, 0x656647bd92878686, 0x2c262348e16a684,
    0x7a64c2ad90d11178, 0x890045b468770daf, 0x3c242aae83aca429, 0xedf8d229b7950a65, 0xfffe9451e79b4c21, 0xb31bbf52ced1056a, 0x94150d04b2e022e0, 0x461237480d3706c7,
    0x25a9eb8f6ac27cee, 0xe550b1a7d065522, 0x4848b5fe20c253f, 0x8198036a6d65ec01, 0xfd1b202f5f724d64, 0x84a67362efcd6fd9, 0x3d48136393836461, 0x78ae960c9941ff20,
    0xc695e0e0ebfea123, 0x23a8860c772e61b3, 0x87bb41cc3d848ae1, 0x1f66925d783bb450, 0xa69db512b4b1f8fb, 0xd00933b8432a53f9, 0x2f4593538cdb350a, 0x79f859de404f8d79,
    0xc46e0a2334c06d3f, 0x329b211de057f5f, 0x45e54d6698a1ca4b, 0x95660c96bcddc12b, 0x49bb98db055a935a, 0xd165ca271e325087, 0x8144f3aa092423ee, 0x87067fd20e240dbd,
    0xe43bc03c64e162a1, 0x3f81cbd279dac2c7, 0x4d78f4f93e1350b, 0x2d772c739b5bdcb1, 0x1176629db0326c69, 0x35c10f33460ab528, 0xc57d7d3a4ead27b8, 0xf576e5d5516d1a5c,
    0x355d4218201f7b59, 0x5724bd370b793daf, 0xdb3007f4bbf2a383, 0x7d28ba3a685065c4, 0xc42ce943fcfd6e02, 0xbb51e832baf23ee1, 0x9d3722745216b122, 0x683dcdcf0901fccb, },
    {
    0xd0155d45da58e0ae, 0x51a0ad8a6b634382, 0xfd6508b01ff7ef6a, 0x2f88513a4e1f888b, 0x1329e62c4cc57a77, 0x7bd2096bab82649f, 0xdedadb0490930d7f, 0xce75c4bf3922ae01,
    0x461aea9b6bcff19a, 0x76eeb59691183dcd, 0xcd539696fc3be4b, 0x48f1c8ebd63806ee, 0x3c34cbca92129b0a, 0xb0cd7c360fecb3b0, 0xbe011375b2271932, 0x1c302ddde8bbe6fb,
    0x4529bed26d669949, 0x20c1d7c8424e90bf, 0xb8d7d234e21c9c04, 0x14dfa2101a52111d, 0x7d215047d132fe74, 0x1f2a91a2d3ebc47, 0xa583b0cdb3e94234, 0xed4471bd86a24139,
    0xcb91cf2a5ce2759d, 0x5d83c4caa388faf, 0x21cc88f422f96548, 0x1dbad7d19dafae09, 0x695fec212873475f, 0x5d62e5f1409f0dfc, 0x338c6830da425a92, 0xb2211168f6d5673f,
    0xec7ea07092acdad, 0x1f49f13118c28196, 0x8e2bd2f549c4021e, 0x1eaad4e30e5db3e9, 0xf18dacc960642aeb, 0x9a01a806528ec44a, 0x77a62a806b2c3aec, 0x769abd8347be5515,
    0x83f543920687d841, 0x87da0e8529d1b591, 0x81967a941797f060, 0xf656ca16e71d0b7, 0x3d03bb480417df2d, 0x23c51a34f2282310, 0x72cba3f9f07434f7, 0x42bc516a0f70a8c8,
    0xfa8756596ae55258, 0xc545be7894862760, 0xc5e588d8bd829e3c, 0x29ff5831654ca2b0, 0x756816da0161d9ab, 0xa205b7091860c310, 0xb9788fd841f8d5fc, 0x8597f252b0e982e6,
    0x58c057f0121065a2, 0x8b94a97ca27933ea, 0x763ae3186ac394b7, 0xabb77a1f8d8e0d7, 0x543d23911118dde1, 0xd7ce66e0b346ce73, 0xc7b8dff397ea7957, 0xda15926c0950f706, },
    {
    0xda46e18ea9f7df06, 0xca6966630effddb6, 0xcc10dc95e30cf225, 0x69daf7096ec99372, 0xb271ccf3a753dbbf, 0xce2d220a1943cd43, 0x9738d860a50aaaf9, 0x15c3f7fdc5368c3e,
    0xf0b62cb186ecb51d, 0xa450ce7f0e662173, 0x4e4a1c205cc1b4b2, 0x4f6e37a8d5dedc8c, 0xb9f17c9d6bad9e29, 0xd881b6e5645901ef, 0x5755df1138efd9e7, 0x71a828889dd7cdaa,
    0x862dc3bbbfe1deb5, 0xa01215c4bd35da72, 0xc241f5b4673754dc, 0xd1235d09771fd072, 0xa933c4def982c975, 0x82ced402756555cb, 0x772d3f746a3f5ab8, 0x4d0e37e6be586aec,
    0x51e1e69392acf950, 0x63ff06e8f76f3727, 0x5edc181b18f5aff7, 0xba177e1d2f1ede36, 0x18cd9f5de830a9f1, 0xba099642df5e558d, 0x91ad021608f23a1b, 0x3a581b6a9107e8a6,
    0xceab2345d044bfa2, 0xeb440381d7cebdab, 0x2194ee8b45f6c2a7, 0x9ca5fa5f6f38482f, 0xf2ff7fb51b57525b, 0x7e697af97a94bdd2, 0xaba3d83f1892df4f, 0x25ce60fff49fe102,
    0x3396a2a39101d016, 0x5537e8269f09e03d, 0xd59116483de5336a, 0x7e38d2f4a6d2ac76, 0x4d46ba145b190a67, 0x2fb876099ff41796, 0xc3d07b95527dfea9, 0x3670aa4b9983d42b,
    0x6e7628e2f0dfc34a, 0x3eac148ec31121bc, 0x2cade842125ead0b, 0xad1867c9d49e1d6b, 0x73ed9ddff4598d3c, 0x33a34c07cc4064bf, 0x74f2a1bbf0215c11, 0xc8c44bcb870088d1,
    0x506faa3e93bb928e, 0x153c57b3e64dca2e, 0x2a9136b6a5338930, 0xa03bf8b5bfd5ca2e, 0x279a0451a0ff97f7, 0x86093059ab595c93, 0x49da43f2bd3edd85, 0x73a5aff6488e7ca9, },
    {
    0x4c8dd3977194ce69, 0x49edfeff6e32b3d, 0x21b93ed03ea54acd, 0x21188a97197cb726, 0x1cdf73183832c826, 0x334b6755cb76b83e, 0x2377fab63227ed95, 0x37175e5c030de4ea,
    0xa84fc7122acba514, 0x3df48f1d75f074b4, 0xa28c8e45eba668ae, 0x3f72707645a1867e, 0x6dccd2f7269d4a4e, 0x9c9e2c63b86c0f4d, 0x50ec8d609601ade5, 0x1512a6c53209bed1,
    0x3e394cb92463b8fd, 0x918d2b926cc1907, 0x7c6a9cfc641d67f2, 0x1f2bf8a50c9dd0a3, 0x8d7e3a676eaad866, 0x26583c1bbee5c435, 0x2999d5c8e902f9af, 0x745750534cf8701f,
    0xe262771b6c41c745, 0x2ff17fff6648c1c8, 0x90bb3aa4f921468a, 0x5015fddd74518cc7, 0xfdabec3630c9885a, 0xc042426757ab00cd, 0x493197e2d6b3383e, 0xd3b4ca1d478f796,
    0xf907bbed256c9e42, 0xa3bed40ea9f25433, 0x57fe705e0b3c35be, 0x9fbffc62416b0961, 0xa63aea267baa6a89, 0x87e82ca17adcc2cf, 0xadc66d5fb02e7f73, 0xa07baee40793ad7f,
    0xdf1a60a77c4de3fe, 0x9c6b9805e74d85a3, 0x38dd565348a924a9, 0xf5480b2060a074aa, 0x9ecc9b8fe47e7848, 0xb4e81fb55b35785b, 0x67db454cee5f8644, 0x780b4706c0fd1426,
    0x54d05b2862f0acb7, 0x81dd4925231b801a, 0x1138fd5cb3961ab8, 0xa72a98ccf7f0f522, 0x3a4ea7fee739d25d, 0xef42523f8949ac75, 0xc73d7b57c476738, 0xd1e400d03c52b85c,
    0x6a3326539541e15d, 0x1f4384ed689516bd, 0xf13b0c9ff062e22e, 0x3b126d061fe75209, 0x148bc5d58ed34f84, 0xffaa0aadfec8c382, 0x1923cd41493432ed, 0x64d626fe835aa1f4, },
    {
    0x3db1eab0a54ff617, 0x3068f940a8ae8a55, 0x2865f32f5be002a3, 0x6fa90d7344d82be6, 0x11badcea2581daed, 0xd9d4c15e51bb47ce, 0x9a201ad5a309d292, 0x1f584a69c346d447,
    0x4cafbb0d0f8cf0be, 0x29021881c1565dd0, 0x14a46daa69920b80, 0x3066a6e4b021c504, 0x500efd286d00a2bb, 0xcae6c0cfc44609, 0x924d7133d87c3a6d, 0xf0578d2309f2deb1,
    0x5614051ad70b3f60, 0x45fe51b56cb2babe, 0xa359dfdd49ee2e85, 0xe3617a73796c59f0, 0x1b4829311eca9687, 0xf536ad76016039c6, 0xa551609b6352ec56, 0x6a07d193ab237d12,
    0x5edb161169c05ebe, 0x58d78c9fd866e5d4, 0xe471c261989c2a43, 0xe11e4ea21fe989fc, 0x24314f9b45f35db, 0x7db5586f152589fa, 0x43a230679aa54a3a, 0x1eb30d9e8dc8484d,
    0x98a5934c4cc2d0ce, 0x4ce229e7a4cd436c, 0x1f70843dd2b504a3, 0x1660e47bcb974fbf, 0xe88386d377daeb7, 0xb9264d0eb3061583, 0x78960ab1ed1eb899, 0xe78a21bfa13af6cc,
    0x7a4886ed508c633a, 0x469ce7334c3d6c03, 0xba8300851504955d, 0x7ffb30b4f67a0993, 0x1ddd160a9a67cc10, 0xfafbc948778c4f9f, 0x6a743befe33b1108, 0xf574742bba7dacfa,
    0xba5da07a4d3745df, 0xcd01074bb245d0ba, 0xa38e67f82248e081, 0x309d78cabde39215, 0xadd3b5875822344c, 0xc18a5dc0971cec70, 0x7c83e694a989e4b0, 0xabdf4ff0197eddc7,
    0x5bd3097ea6c1714f, 0x7cd29e38daf0efd6, 0xdb407ea4317140f2, 0xd0a6d4231bade8a8, 0x495a526c9cb2f7c8, 0xf6590bed29361d7f, 0x431d6aafe2ea8ecd, 0x958f281416553b28, },
    {
    0x9c7b6e2a19495d50, 0x45efa1658a019940, 0xa21f4d8343dee2e6, 0x37f4912dc77c69f3, 0xd84bfeb975616f52, 0x987168341bb1de35, 0xd9b9418ec2d09730, 0xb36e9eb77682b695,
    0xd59df9f24d50075b, 0x72a13bbc8a374305, 0x9799e81d83a50e67, 0x31b2be837ffe185e, 0x70fff980c8f86aaf, 0x10afa00d4e01d064, 0x4b004d5aef8064be, 0x155ed032aa321189,
    0xfe86083133f9491e, 0x78ea65c9dc88edd7, 0x7b17862729ca41d5, 0x2a2bd8047c2b7499, 0x6bda198c18032f16, 0xd01244215473a8bc, 0xfadc3cbb6c503fee, 0x1d07a237b178fe05,
    0xc11408c5ab497efa, 0xe5d961da4f67998a, 0x5f07f1212c859c62, 0x9698b7fb4486e616, 0x58daebf88510c5b3, 0xd80a5669e36e2b56, 0x9286c2740be8a54f, 0x7aa736f129964f0d,
    0xa04cb8b42a677e85, 0xc2d63c1cbe004998, 0x6df325fa35809894, 0x26f0cc3bf45bb38a, 0x172f26d8e4f09a25, 0xccb7c50e2b1382d, 0x2e9aa1062a846800, 0xf3e24422c233b929,
    0xe8cec5f5dcdd09, 0x44f3cebf3778199e, 0x418a4aade01716c7, 0xf1ba2f41e3010b6f, 0xdec06fd4d6f56900, 0xd19bb4d26898e7a0, 0xbf230a4ef02fa436, 0xc493ee49daa422e6,
    0x83e65c289bd40603, 0xd63f8a120e2f61dc, 0xbbb677e43f96b7a8, 0x49d94552b5171c85, 0xdbc476c925327e4b, 0xbf23929a9d5936f2, 0xa9ab3329db0981b9, 0x499de7bb87258553,
    0x43172110385b21a5, 0x391120a68effebb9, 0xd1a95692ed7e06bb, 0x8e611d9cd5c8be4c, 0xbc4da4672cbe4403, 0x93be3a27464144ca, 0xcd4f1b0e5182c667, 0x15b873c77e1edc84, },
    {
    0x6fb2355401a0cb55, 0x455b176ea07cb63d, 0xc8ed319c1fc074d6, 0x8462d7575809298b, 0x4fdafcd5cdf0a097, 0x8dc923e6f8f99db3, 0xe8cb67b1fc9d38b0, 0x10424dd46d612812,
    0x62e24511dc35982c, 0x3ff9f9dd0a344a95, 0x36751b6f86ff22a3, 0x3abeaae2bfd740cd, 0xc8e7b650a4a3a56a, 0xcff4a258f6c5189c, 0x328d34a5ea2dd218, 0x7e109483b7687b99,
    0xf057414b774ced77, 0x8c05520663ee2093, 0xefabc7a9b4d1fb22, 0xf7f316e7f37b68df, 0x607bc3c848738d55, 0xef930c2e2fc14359, 0x12c1d6f9771ac1b8, 0x943ef8ced8991f39,
    0x3ad5648830fba739, 0xd61ec4bf2cec132b, 0xdd8598b349fe9e25, 0x31ecf17954c7f153, 0xdbbb938294fe0b22, 0xcce98a67ae23df21, 0x4f6774d8819d3ebd, 0x4ffd128f4834015,
    0x3ac50b7402798ea7, 0x39c2f1bd8b2ae4f6, 0x518e61636cc01ad3, 0xbfd79d3242588d00, 0xe37801ba3a246811, 0x857fca78297e6d0e, 0x9a5c712c237f2ae8, 0xb66bb09d8b1fb0d7,
    0x86c36180745f20ab, 0xb09877b8b29ed4b3, 0xecfb1a9d07017a25, 0x85ed225740d45a80, 0xbdbe9f3e54477257, 0x506fb46341fb4aa0, 0x416feb39f45d850d, 0xc351c1f19611ba2a,
    0xde3241835ae72462, 0xdbc0bc88b478c1c1, 0x69b8ecf10c9f996c, 0xdb460bf54c2bfcb0, 0xa968ec140c8abb9a, 0xd4b5e4dda39f5e3a, 0xb071524493e6ab94, 0x9607e6c2cde77b3e,
    0x15c78a57da2f119e, 0x57277946366260a7, 0xd57dae3c89aad4c9, 0x29a92902d0d84334, 0x4bada614c115a776, 0xe9818b6c9189d3a3, 0x9540cd2cbc1beefa, 0xcd3a3aa817575a48, },
    {
    0xa61e277e32764765, 0x16d30a6b91beff8c, 0x7ed7b349f8a481b3, 0x575c117f0d1e62f0, 0x7fafab8fb55049fb, 0x80840c8699336886, 0xc5deb60e9b8e7451, 0x4abb7a50d8828500,
    0xdc450dbb945d126f, 0x5e3463f3daecdabf, 0xe43d9570a0c0b975, 0x4af2af925a4cbe90, 0x480e31e7ca23162d, 0x1a41a7b3adae48f3, 0x787c29e4b7a3e7bb, 0x2c54aea636350121,
    0x8c4febba3d2703ac, 0x7176a97ad0830130, 0xd51eac34fc2473ad, 0x491f4cadddfbbf01, 0x127530363e3c5c83, 0x146101abaae87bdc, 0x1d8a8c2556d27ef3, 0xde95bbe9f9244cec,
    0x85e6eea91af916bc, 0x30cfea5df294c8f5, 0x64f2dae86626f0ce, 0xec8302aba34dbbf5, 0x8d2d1de836481968, 0x61faf27840e75f99, 0x4bcc1e64b2e2cbc5, 0xe9a4d4d65b2e8fa6,
    0x3ad6badc791a2875, 0x7dd041da81ecd3c7, 0xc04a12495192749f, 0xc77d50ef9c2e7463, 0x6eaaa5608d3793bd, 0x1deb3794870cb664, 0xee632bf3f32f5e91, 0x480e71bffc9e5a15,
    0xf7a0586d7433bd60, 0x8ab2bb3067512382, 0xa3dd662386e1d0ba, 0xffc15854a941705, 0xdf1f6a972c7ccb55, 0x871fca0b7752c2de, 0x44e2c9806ee438cd, 0x17960bb301667706,
    0x8e0973da3690183c, 0xc3ac79bf02c1bea8, 0xa59e16eeea833f0d, 0xe54baa4291c05ad8, 0x340945b86c4b3777, 0x26e97899d18f7488, 0xa55e88b577410f7f, 0xb4055b9596634bca,
    0xf1ac52a5fc5d207a, 0xe23d4527e2b864de, 0xffc5af710b160c5c, 0xdfe745e5af7c27a0, 0x1dc291c63bd9d560, 0xd14ae5cce6b0244a, 0xc07a7fdaa9d5ddc7, 0xcbfc7d465e9dc8b5 }
};

static const uint64_t side_hashkey = 0x56877bf89fe998c0;

static const uint64_t castling_hashkey[] = {
    0xab49863d1268b32d, 0xa3265383b7e69449, 0xe82e447c5d17cf38, 0x6c49f103087cc1f3, 0x9c0f1e1c544b5868, 0xd8b5f3b5dafcd671, 0x1536f22d54b4203c, 0x99b2a219f74f7123,
    0x57477cdcbd7a0269, 0xbc6aa2361f2f4c4b, 0x65395310bcd9ebc3, 0x9b4ec45c1ae1213e, 0x2f2b282f19b6973a, 0x4d5427da9c405a9a, 0x8503dff2fee404b6, 0xaf48d81e11409dbb
};

static const uint64_t enpassant_hashkey[] = {
    0x1AA6322EDE3D9E04, 0x2B59AB8CBAA7DCEC, 0x309F56C67FF47369, 0x194C52477A7CF40, 0x4AADC484B5D45946, 0x1D90C74ABB1D77E0, 0x1A0628410373DBE0, 0x7B996ED024B35BC3,
    0x3AB55BCFDC497A36, 0xF36CD06E423FFE05, 0xC2FEDBCF398D6BC8, 0xF7878B41484BD082, 0x12FC7C8E45EE5F80, 0xF40A690B4E33ED60, 0xA2D38D243FA71334, 0xB5E1B40B963ECD9A,
    0x237AC93BBF7A11C9, 0x899F9DBE7AA69547, 0xA4CF6B38FC22E402, 0xFC328E3A9B1A14BD, 0xACC75DCBB34AC626, 0xA91ACA4C2591CD51, 0xFB415B63F86DF68A, 0xF81E7FA4D30E59A3,
    0xA0657782FC2E7A5C, 0xF2BE26FCDA8C42AA, 0xD0D9A3E33A213C06, 0x5457366B5859FD18, 0x3E9F1A0643808336, 0xE0FDD40F235013B, 0x51E6E6CE837C718B, 0xDF1DE8988F467625,
    0x2B068280D99934E2, 0xE666E93D55D28E33, 0x2B0536F389FFF1ED, 0x86A5C1BF648039C6, 0x27F4E9CB27116A04, 0x8DAAC3052611CF38, 0x2C92FB6AC36E5C16, 0x77A008212D7D97, 
    0x3B22357A435681F8, 0x401921DE0304FB3B, 0xCFD5293DC0D43CC, 0x1E2323B60181283A, 0x6C43FF042CE85273, 0x6E7F3BA9E9CAF2FB, 0xD33AE601FF21D88A, 0xBBAA9DB2A9A17A2,
    0x1422A2039B508C9E, 0x33CE494E3E66A06A, 0xECF47EE5F5DBCC7C, 0x7D7DC2303457BEA8, 0x63EAB87BA0679A73, 0x81D698E33BC344D, 0xEBD0A80769952FB, 0x6148915D5188EF3D,
    0xBB039B7C5D993D2E, 0x2E8D27E43DC9C092, 0xE7608BFB47DF70A4, 0x8362F375F3035ED0, 0xBE08266D29525758, 0x2F6150C1046D03EA, 0xA253CE4F3C06FEC4, 0xDEF530F29451C120
};

static const int INF_SCORE = 900000;

static const int MATE_SCORE = 300000;

static const int MAX_DEPTH = 64;

static const int NULL_MOVE_R = 3;

static const int LMR_MOVE_LIMIT = 4;

static const int LMR_DEPTH_LIMIT = 3;


// move representation in binary                var                 hex

// 0000 0000 0000 0000 0000 0000 0011 1111      from                0x3f
// 0000 0000 0000 0000 0000 1111 1100 0000      to                  0xfc0
// 0000 0000 0000 0000 1111 0000 0000 0000      piece               0xf000
// 0000 0000 0000 1111 0000 0000 0000 0000      promoted piece      0xf0000
// 0000 0000 0001 0000 0000 0000 0000 0000      capture flag        0x100000
// 0000 0000 0010 0000 0000 0000 0000 0000      double push flag    0x200000
// 0000 0000 0100 0000 0000 0000 0000 0000      enpassant flag      0x400000
// 0000 0000 1000 0000 0000 0000 0000 0000      castling flag       0x800000
// 1111 1111 0000 0000 0000 0000 0000 0000      score               0xFF000000
